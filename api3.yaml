openapi: 3.0.0
info:
  title: Main Bersama API
  termsOfService: http://swagger.io/terms/
  contact:
    email: noreply@ayy.my.id
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3333/api/v1
tags:
  - name: Venues
    description: Manage your Venue
  - name: Fields
    description: Manage your field
  - name: Bookings
    description: Manage your bookings
  - name: Authentication
    description: Manage user authentication
paths:
    /Venues:
    get:
      tags:
        - Venues
      summary: Get all venues data
      operationId: getVenues
      responses:
        '200':
          description: success!
          content: {}
        '400':
          description: not ok!
          content: {}
    post:
      tags:
        - Venues
      summary: Add new venue
      operationId: addVenue
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - address
                - name
                - phone
              properties:
                name:
                  type: string
                  description: Venue name
                address:
                  type: string
                  description: Venue address
                phone:
                  type: string
                  description: Venue phone number (use with country code. E.g. +62xxxxxx)
        required: true
      responses:
        '200':
          description: new venue created!
          content: {}
        '400':
          description: not ok!
          content: {}
      security:
        - bearerAuth: []
  /Venues/{id}:
    get:
      tags:
        - Venues
      summary: Get venue details by venue id
      operationId: getVenueById
      parameters:
        - name: id
          in: path
          description: The ID that needs to be fetched
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success!
          content: {}
    delete:
      tags:
        - Venues
      summary: Deletes a venue
      operationId: deleteVenue
      parameters:
        - name: id
          in: path
          description: Venue id to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: delete success!
          content: {}
        '400':
          description: not ok!
          content: {}
      security:
        - bearerAuth: []
    patch:
      tags:
        - Venues
      summary: Update an existing venue
      operationId: updateVenue
      parameters:
        - name: id
          in: path
          description: The venue ID that will be updated
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Venue name
                address:
                  type: string
                  description: Venue address
                phone:
                  type: string
                  description: Venue phone number (use with country code. E.g. +62xxxxxx)
      responses:
        '200':
          description: update success!
          content: {}
        '400':
          description: not ok!
          content: {}
      security:
        - bearerAuth: []
  /Fields:
    get:
      tags:
        - Fields
      summary: Get all fields data
      operationId: getFields
      responses:
        '200':
          description: success!
          content: {}
        '400':
          description: not ok!
          content: {}
  /venues/{venue_id}/fields:
    post:
      tags:
        - Fields
      summary: Add new field
      operationId: addField
      parameters:
        - name: venue_id
          in: path
          description: Venue ID where field is located
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - name
                - type
              properties:
                name:
                  type: string
                  description: Field name
                type:
                  type: string
                  description: >-
                    Field type (soccer, minisoccer, futsal, basketball,
                    volleyball)
        required: true
      responses:
        '201':
          description: Berhasil menambahkan data field baru!
          content: {}
        '400':
          description: not ok!
          content: {}
      security:
        - bearerAuth: []
  /fields/{id}:
    get:
      tags:
        - Fields
      summary: Get field details by field id
      operationId: getFieldById
      parameters:
        - name: id
          in: path
          description: The ID that needs to be fetched
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get field detail success!
          content: {}
        '404':
          description: Field not found!
          content: {}
    delete:
      tags:
        - Fields
      summary: Deletes a field
      operationId: deleteField
      parameters:
        - name: id
          in: path
          description: Field id to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: delete success!
          content: {}
        '400':
          description: not ok!
          content: {}
      security:
        - bearerAuth: []
    patch:
      tags:
        - Fields
      summary: Update an existing field
      operationId: updateField
      parameters:
        - name: id
          in: path
          description: The field ID that will be updated
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Field name
                type:
                  type: string
                  description: >-
                    Field type (soccer, minisoccer, futsal, basketball,
                    volleyball)
      responses:
        '200':
          description: update success!
          content: {}
        '400':
          description: not ok!
          content: {}
      security:
        - bearerAuth: []
  /Bookings:
    get:
      tags:
        - Bookings
      summary: Get all fields data
      operationId: getBookings
      responses:
        '200':
          description: Berhasil mendapatkan semua data booking
          content: {}
        '400':
          description: not ok!
          content: {}
    post:
      tags:
        - Bookings
      summary: Add new booking
      operationId: addBooking
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - field_id
                - play_date_end
                - play_date_start
                - title
              properties:
                title:
                  type: string
                  description: Booking title
                play_date_start:
                  type: string
                  description: Play date start time
                play_date_end:
                  type: string
                  description: Play date end time
                field_id:
                  type: integer
                  description: Choosen Field ID
                  format: int32
        required: true
      responses:
        '201':
          description: 'Berhasil booking, id booking anda: booking_id'
          content: {}
      security:
        - bearerAuth: []
  /bookings/{id}:
    get:
      tags:
        - Bookings
      summary: Get booking details by booking id
      operationId: getBookingById
      parameters:
        - name: id
          in: path
          description: Booking ID that needs to be fetched
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Berhasil get data booking by id
          content: {}
    delete:
      tags:
        - Bookings
      summary: Deletes a booking
      operationId: deleteBooking
      parameters:
        - name: id
          in: path
          description: Booking id to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Booking delete success!
          content: {}
        '400':
          description: not ok!
          content: {}
      security:
        - bearerAuth: []
    patch:
      tags:
        - Bookings
      summary: Update an existing field
      operationId: updateBooking
      parameters:
        - name: id
          in: path
          description: Booking ID that needs to be fetched
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                title:
                  type: string
                  description: Booking title
                play_date_start:
                  type: string
                  description: Play date start time
                play_date_end:
                  type: string
                  description: Play date end time
      responses:
        '200':
          description: Booking update success!
          content: {}
        '400':
          description: not ok!
          content: {}
      security:
        - bearerAuth: []
  /bookings/{id}/join:
    put:
      tags:
        - Bookings
      summary: Get booking details by booking id
      operationId: joinBooking
      parameters:
        - name: id
          in: path
          description: Booking ID that user choose to join to
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Berhasil join booking
          content: {}
        '400':
          description: Anda sudah join booking ini
          content: {}
        '500':
          description: please call administrator about this
          content: {}
      security:
        - bearerAuth: []
  /bookings/{id}/unjoin:
    put:
      tags:
        - Bookings
      summary: Get booking details by booking id
      operationId: unjoinBooking
      parameters:
        - name: id
          in: path
          description: Booking ID that user choose to unjoin to
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Berhasil membatalkan booking
          content: {}
      security:
        - bearerAuth: []
  /schedules/:
    get:
      tags:
        - Bookings
      summary: >-
        Menampilkan list booking yang diikuti oleh user yang sedang melakukan
        login
      operationId: getSchedules
      responses:
        '200':
          description: Berhasil get semua data booking user {user_name}
          content: {}
        '500':
          description: please call administrator about this
          content: {}
      security:
        - bearerAuth: []
  /register:
    post:
      tags:
        - Authentication
      summary: >-
        Melakukan pendaftaran user baru dengan memasukan data name, email, dan
        password. Aplikasi mengirimkan kode OTP ke email user pendaftar.
      operationId: register
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
                - name
                - password
              properties:
                name:
                  type: string
                  description: User name
                email:
                  type: string
                  description: User email address
                password:
                  type: string
                  description: 'User password (min. length: 6 character)'
        required: true
      responses:
        '200':
          description: >-
            Register success! Please check OTP code on your email for
            verification.
          content: {}
        '422':
          description: error messages
          content: {}
  /login:
    post:
      tags:
        - Authentication
      summary: Melakukan login dengan memasukkan email dan password.
      operationId: login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: User email address
                password:
                  type: string
                  description: 'User password (min. length: 6 character)'
        required: true
      responses:
        '200':
          description: Token API (Bearer Token)
          content: {}
        '400':
          description: error messages
          content: {}
  /verifikasi-otp:
    post:
      tags:
        - Authentication
      summary: Memverifikasi user baru
      operationId: verifikasi-otp
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
                - otp_code
              properties:
                email:
                  type: string
                  description: User email address
                otp_code:
                  type: number
                  description: 'User password (min. length: 6 character)'
        required: true
      responses:
        '200':
          description: Konfirmasi OTP Berhasil!
          content: {}
        '404':
          description: Gagal konfirmasi OTP
          content: {}
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Pet not found
          content: {}
        '405':
          description: Validation exception
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      x-codegen-request-body-name: body
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '405':
          description: Invalid input
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
      x-codegen-request-body-name: body
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use        
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
          content: {}
      deprecated: true
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Pet not found
          content: {}
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the pet
                status:
                  type: string
                  description: Updated status of the pet
      responses:
        '405':
          description: Invalid input
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Pet not found
          content: {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the pet
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
          content: {}
      x-codegen-request-body-name: body
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Order not found
          content: {}
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: List of user object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
